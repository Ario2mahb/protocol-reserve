{
  "address": "0x6Bfa785518b466368199b5b02F3661E2A4638C01",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_corePoolComptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wbnb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vbnb",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTotalPercentage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loopsLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredLoops",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IProtocolShareReserve.IncomeType",
          "name": "incomeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "AssetsReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "DistributionConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPercentage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "DistributionConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLoopsLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newmaxLoopsLimit",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPoolRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPoolRegistry",
          "type": "address"
        }
      ],
      "name": "PoolRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPrime",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPrime",
          "type": "address"
        }
      ],
      "name": "PrimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CORE_POOL_COMPTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ProtocolShareReserve.Schema",
              "name": "schema",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolShareReserve.DistributionConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "name": "addOrUpdateDistributionConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "assetsReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributionTargets",
      "outputs": [
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUnreleasedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loopsLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLoopsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "releaseFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolRegistry",
          "type": "address"
        }
      ],
      "name": "setPoolRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prime",
          "type": "address"
        }
      ],
      "name": "setPrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum IProtocolShareReserve.IncomeType",
          "name": "incomeType",
          "type": "uint8"
        }
      ],
      "name": "updateAssetsState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd14769d542b13a94fd7203adcaac1a32f3936176250b4bcac43577e80ea8e4be",
  "receipt": {
    "to": null,
    "from": "0x8BDA9f9E1fEF0DFd404Fef338D9fE4c543d172e1",
    "contractAddress": "0x6Bfa785518b466368199b5b02F3661E2A4638C01",
    "transactionIndex": 2,
    "gasUsed": "2640137",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000",
    "blockHash": "0x73ee53ef04a4526bbdd5bf353219ff719d73ea4ae03ba141c6cfefad12f2b50f",
    "transactionHash": "0xd14769d542b13a94fd7203adcaac1a32f3936176250b4bcac43577e80ea8e4be",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 33455143,
        "transactionHash": "0xd14769d542b13a94fd7203adcaac1a32f3936176250b4bcac43577e80ea8e4be",
        "address": "0x6Bfa785518b466368199b5b02F3661E2A4638C01",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 10,
        "blockHash": "0x73ee53ef04a4526bbdd5bf353219ff719d73ea4ae03ba141c6cfefad12f2b50f"
      }
    ],
    "blockNumber": 33455143,
    "cumulativeGasUsed": "3128308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfd301ad2503b25a7670a45b11a043c20b04ee896",
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0x2E7222e51c0f6e98610A1543Aa3836E092CDe62c"
  ],
  "numDeployments": 1,
  "solcInputHash": "49fd7e7c91f83381164103087afb0c45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_corePoolComptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vbnb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalPercentage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loopsLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLoops\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IProtocolShareReserve.IncomeType\",\"name\":\"incomeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"AssetsReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"DistributionConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"DistributionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLoopsLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newmaxLoopsLimit\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPoolRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolRegistry\",\"type\":\"address\"}],\"name\":\"PoolRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPrime\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPrime\",\"type\":\"address\"}],\"name\":\"PrimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_POOL_COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolShareReserve.DistributionConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"addOrUpdateDistributionConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"assetsReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionTargets\",\"outputs\":[{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUnreleasedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loopsLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoopsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRegistry\",\"type\":\"address\"}],\"name\":\"setPoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prime\",\"type\":\"address\"}],\"name\":\"setPrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum IProtocolShareReserve.IncomeType\",\"name\":\"incomeType\",\"type\":\"uint8\"}],\"name\":\"updateAssetsState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addOrUpdateDistributionConfigs((uint8,uint256,address)[])\":{\"details\":\"Add or update destination targets based on destination address\",\"params\":{\"configs\":\"configurations of the destinations.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getUnreleasedFunds(address,uint8,address,address)\":{\"details\":\"Used to find out the amount of funds that's going to be released when release funds is called.\",\"params\":{\"asset\":\"the asset address which will be released\",\"comptroller\":\"the comptroller address of the pool\",\"destination\":\"the destination address of the distribution target\",\"schema\":\"the schema of the distribution target\"}},\"initialize(address,uint256)\":{\"details\":\"Initializes the deployer to owner.\",\"params\":{\"_accessControlManager\":\"The address of ACM contract\",\"_loopsLimit\":\"Limit for the loops in the contract to avoid DOS\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"releaseFunds(address,address[])\":{\"details\":\"Release funds\",\"params\":{\"assets\":\"assets to be released to distribution targets\",\"comptroller\":\"the comptroller address of the pool\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setPoolRegistry(address)\":{\"details\":\"Pool registry setter.\",\"params\":{\"_poolRegistry\":\"Address of the pool registry\"}},\"setPrime(address)\":{\"details\":\"Prime contract address setter.\",\"params\":{\"_prime\":\"Address of the prime contract\"}},\"totalDistributions()\":{\"details\":\"Returns the total number of distribution targets\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateAssetsState(address,address,uint8)\":{\"details\":\"Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.\",\"params\":{\"asset\":\"Asset address.\",\"comptroller\":\"Comptroller address(pool)\",\"incomeType\":\"type of income\"}}},\"stateVariables\":{\"CORE_POOL_COMPTROLLER\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"WBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MaxLoopsLimitExceeded(uint256,uint256)\":[{\"notice\":\"Thrown an error on maxLoopsLimit exceeds for any loop\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}]},\"events\":{\"AssetReleased(address,address,uint8,uint256,uint256)\":{\"notice\":\"Event emitted when an asset is released to a target\"},\"AssetsReservesUpdated(address,address,uint256,uint8,uint8)\":{\"notice\":\"Event emitted after the updation of the assets reserves.\"},\"DistributionConfigAdded(address,uint256,uint8)\":{\"notice\":\"Event emitted when distribution configuration is added\"},\"DistributionConfigUpdated(address,uint256,uint256,uint8)\":{\"notice\":\"Event emitted when distribution configuration is updated\"},\"MaxLoopsLimitUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max loops limit is set\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"PoolRegistryUpdated(address,address)\":{\"notice\":\"Emitted when pool registry address is updated\"},\"PrimeUpdated(address,address)\":{\"notice\":\"Emitted when prime address is updated\"},\"ReservesUpdated(address,address,uint8,uint256,uint256)\":{\"notice\":\"Event emitted when asset reserves state is updated\"}},\"kind\":\"user\",\"methods\":{\"CORE_POOL_COMPTROLLER()\":{\"notice\":\"address of core pool comptroller contract\"},\"WBNB()\":{\"notice\":\"address of WBNB contract\"},\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"assetsReserves(address,address,uint8)\":{\"notice\":\"comptroller => asset => schema => balance\"},\"distributionTargets(uint256)\":{\"notice\":\"configuration for different income distribution targets\"},\"poolRegistry()\":{\"notice\":\"address of pool registry contract\"},\"prime()\":{\"notice\":\"address of Prime contract\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"totalAssetReserve(address)\":{\"notice\":\"asset => balance\"},\"vBNB()\":{\"notice\":\"address of vBNB contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolReserve/ProtocolShareReserve.sol\":\"ProtocolShareReserve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title Venus Access Control Contract.\\n * @dev The AccessControlledV8 contract is a wrapper around the OpenZeppelin AccessControl contract\\n *      It provides a standardized way to control access to methods within the Venus Smart Contract Ecosystem.\\n *      The contract allows the owner to set an AccessControlManager contract address.\\n *      It can restrict method calls based on the sender's role and the method's signature.\\n */\\n\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x618d942756b93e02340a42f3c80aa99fc56be1a96861f5464dc23a76bf30b3a5\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41deef84d1839590b243b66506691fde2fb938da01eabde53e82d3b8316fdaf9\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/isolated-pools/contracts/MaxLoopsLimitHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title MaxLoopsLimitHelper\\n * @author Venus\\n * @notice Abstract contract used to avoid collection with too many items that would generate gas errors and DoS.\\n */\\nabstract contract MaxLoopsLimitHelper {\\n    // Limit for the loops to avoid the DOS\\n    uint256 public maxLoopsLimit;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when max loops limit is set\\n    event MaxLoopsLimitUpdated(uint256 oldMaxLoopsLimit, uint256 newmaxLoopsLimit);\\n\\n    /// @notice Thrown an error on maxLoopsLimit exceeds for any loop\\n    error MaxLoopsLimitExceeded(uint256 loopsLimit, uint256 requiredLoops);\\n\\n    /**\\n     * @notice Set the limit for the loops can iterate to avoid the DOS\\n     * @param limit Limit for the max loops can execute at a time\\n     */\\n    function _setMaxLoopsLimit(uint256 limit) internal {\\n        require(limit > maxLoopsLimit, \\\"Comptroller: Invalid maxLoopsLimit\\\");\\n\\n        uint256 oldMaxLoopsLimit = maxLoopsLimit;\\n        maxLoopsLimit = limit;\\n\\n        emit MaxLoopsLimitUpdated(oldMaxLoopsLimit, limit);\\n    }\\n\\n    /**\\n     * @notice Compare the maxLoopsLimit with number of the times loop iterate\\n     * @param len Length of the loops iterate\\n     * @custom:error MaxLoopsLimitExceeded error is thrown when loops length exceeds maxLoopsLimit\\n     */\\n    function _ensureMaxLoops(uint256 len) internal view {\\n        if (len > maxLoopsLimit) {\\n            revert MaxLoopsLimitExceeded(maxLoopsLimit, len);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98c97af128677629375ca93e8d8ca3f337a4abf9304a0a4ddaea9d96cc554c3b\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface ComptrollerInterface {\\n    function isComptroller() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc18c23e82085a42afc9f058cc0ce86dbfe4e5fb0bc9898ddc00783a84d8be7b2\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/IIncomeDestination.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface IIncomeDestination {\\n    function updateAssetsState(address comptroller, address asset) external;\\n}\\n\",\"keccak256\":\"0xd04c051f6aaa914193353843e2d7080a7dcb88dfca2a7ce1612b0b0849cbe49d\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IIncomeDestination } from \\\"./IIncomeDestination.sol\\\";\\n\\ninterface IPrime is IIncomeDestination {\\n    function accrueInterest(address vToken) external;\\n\\n    function vTokenForAsset(address asset) external view returns (address);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1d1aa6cfe99901962c902224fb3de02a81cb04c6db55f79d1a14253060110a44\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface IProtocolShareReserve {\\n    /// @notice it represents the type of vToken income\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(address comptroller, address asset, IncomeType incomeType) external;\\n}\\n\",\"keccak256\":\"0xaaed92230eb64bdbbb9de5ee8f88e0773b8aded9c3d60d7f8273889f5fcb47f8\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface IVToken {\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0718e50835da441b2dddcf6d52a671c43d386b96dbcc9eb41d68c3647b82c117\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/PoolRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\ninterface PoolRegistryInterface {\\n    /*** get VToken in the Pool for an Asset ***/\\n    function getVTokenForAsset(address comptroller, address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2379631a1eaabf96c90ce4c48abeb5d2698c8a672d9db7d68e4adb513b0406ad\",\"license\":\"BSD-3-Clause\"},\"contracts/ProtocolReserve/ProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { AccessControlledV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { MaxLoopsLimitHelper } from \\\"@venusprotocol/isolated-pools/contracts/MaxLoopsLimitHelper.sol\\\";\\n\\nimport { IProtocolShareReserve } from \\\"../Interfaces/IProtocolShareReserve.sol\\\";\\nimport { ComptrollerInterface } from \\\"../Interfaces/ComptrollerInterface.sol\\\";\\nimport { PoolRegistryInterface } from \\\"../Interfaces/PoolRegistryInterface.sol\\\";\\nimport { IPrime } from \\\"../Interfaces/IPrime.sol\\\";\\nimport { IVToken } from \\\"../Interfaces/IVToken.sol\\\";\\nimport { IIncomeDestination } from \\\"../Interfaces/IIncomeDestination.sol\\\";\\n\\nerror InvalidAddress();\\nerror UnsupportedAsset();\\nerror InvalidTotalPercentage();\\nerror InvalidMaxLoopsLimit();\\n\\ncontract ProtocolShareReserve is\\n    AccessControlledV8,\\n    ReentrancyGuardUpgradeable,\\n    MaxLoopsLimitHelper,\\n    IProtocolShareReserve\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice protocol income is categorized into two schemas.\\n    /// The first schema is the default one\\n    /// The second schema is for spread income from prime markets in core protocol\\n    enum Schema {\\n        DEFAULT,\\n        SPREAD_PRIME_CORE\\n    }\\n\\n    struct DistributionConfig {\\n        Schema schema;\\n        /// @dev percenatge is represented without any scale\\n        uint256 percentage;\\n        address destination;\\n    }\\n\\n    /// @notice address of core pool comptroller contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable CORE_POOL_COMPTROLLER;\\n\\n    /// @notice address of WBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable WBNB;\\n\\n    /// @notice address of vBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vBNB;\\n\\n    /// @notice address of Prime contract\\n    address public prime;\\n\\n    /// @notice address of pool registry contract\\n    address public poolRegistry;\\n\\n    uint256 private constant MAX_PERCENT = 100;\\n\\n    /// @notice comptroller => asset => schema => balance\\n    mapping(address => mapping(address => mapping(Schema => uint256))) public assetsReserves;\\n\\n    /// @notice asset => balance\\n    mapping(address => uint256) public totalAssetReserve;\\n\\n    /// @notice configuration for different income distribution targets\\n    DistributionConfig[] public distributionTargets;\\n\\n    /// @notice Emitted when pool registry address is updated\\n    event PoolRegistryUpdated(address indexed oldPoolRegistry, address indexed newPoolRegistry);\\n\\n    /// @notice Emitted when prime address is updated\\n    event PrimeUpdated(address indexed oldPrime, address indexed newPrime);\\n\\n    /// @notice Event emitted after the updation of the assets reserves.\\n    event AssetsReservesUpdated(\\n        address indexed comptroller,\\n        address indexed asset,\\n        uint256 amount,\\n        IncomeType incomeType,\\n        Schema schema\\n    );\\n\\n    /// @notice Event emitted when an asset is released to a target\\n    event AssetReleased(\\n        address indexed destination,\\n        address indexed asset,\\n        Schema schema,\\n        uint256 percent,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when asset reserves state is updated\\n    event ReservesUpdated(\\n        address indexed comptroller,\\n        address indexed asset,\\n        Schema schema,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice Event emitted when distribution configuration is updated\\n    event DistributionConfigUpdated(\\n        address indexed destination,\\n        uint256 oldPercentage,\\n        uint256 newPercentage,\\n        Schema schema\\n    );\\n\\n    /// @notice Event emitted when distribution configuration is added\\n    event DistributionConfigAdded(address indexed destination, uint256 percentage, Schema schema);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address _corePoolComptroller, address _wbnb, address _vbnb) {\\n        if (_corePoolComptroller == address(0)) revert InvalidAddress();\\n        if (_wbnb == address(0)) revert InvalidAddress();\\n        if (_vbnb == address(0)) revert InvalidAddress();\\n\\n        CORE_POOL_COMPTROLLER = _corePoolComptroller;\\n        WBNB = _wbnb;\\n        vBNB = _vbnb;\\n\\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\\n        // to set the state variables.\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the deployer to owner.\\n     * @param _accessControlManager The address of ACM contract\\n     * @param _loopsLimit Limit for the loops in the contract to avoid DOS\\n     */\\n    function initialize(address _accessControlManager, uint256 _loopsLimit) external initializer {\\n        __AccessControlled_init(_accessControlManager);\\n        __ReentrancyGuard_init();\\n        _setMaxLoopsLimit(_loopsLimit);\\n    }\\n\\n    /**\\n     * @dev Pool registry setter.\\n     * @param _poolRegistry Address of the pool registry\\n     */\\n    function setPoolRegistry(address _poolRegistry) external onlyOwner {\\n        if (_poolRegistry == address(0)) revert InvalidAddress();\\n        emit PoolRegistryUpdated(poolRegistry, _poolRegistry);\\n        poolRegistry = _poolRegistry;\\n    }\\n\\n    /**\\n     * @dev Prime contract address setter.\\n     * @param _prime Address of the prime contract\\n     */\\n    function setPrime(address _prime) external onlyOwner {\\n        if (_prime == address(0)) revert InvalidAddress();\\n        emit PrimeUpdated(prime, _prime);\\n        prime = _prime;\\n    }\\n\\n    /**\\n     * @dev Add or update destination targets based on destination address\\n     * @param configs configurations of the destinations.\\n     */\\n    function addOrUpdateDistributionConfigs(DistributionConfig[] memory configs) external nonReentrant {\\n        _checkAccessAllowed(\\\"addOrUpdateDistributionConfigs(DistributionConfig[])\\\");\\n\\n        //we need to accrue and release funds to prime before updating the distribution configuration\\n        //because prime relies on getUnreleasedFunds and its return value may change after config update\\n        _accrueAndReleaseFundsToPrime();\\n\\n        for (uint256 i = 0; i < configs.length; ) {\\n            DistributionConfig memory _config = configs[i];\\n            require(_config.destination != address(0), \\\"ProtocolShareReserve: Destination address invalid\\\");\\n\\n            bool updated = false;\\n            for (uint256 j = 0; j < distributionTargets.length; ) {\\n                DistributionConfig storage config = distributionTargets[j];\\n\\n                if (_config.schema == config.schema && config.destination == _config.destination) {\\n                    emit DistributionConfigUpdated(\\n                        _config.destination,\\n                        config.percentage,\\n                        _config.percentage,\\n                        _config.schema\\n                    );\\n                    config.percentage = _config.percentage;\\n                    updated = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            if (!updated) {\\n                distributionTargets.push(_config);\\n                emit DistributionConfigAdded(_config.destination, _config.percentage, _config.schema);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _ensurePercentages();\\n        _ensureMaxLoops(distributionTargets.length);\\n    }\\n\\n    /**\\n     * @dev Release funds\\n     * @param comptroller the comptroller address of the pool\\n     * @param assets assets to be released to distribution targets\\n     */\\n    function releaseFunds(address comptroller, address[] memory assets) external nonReentrant {\\n        _accruePrimeInterest();\\n\\n        for (uint256 i = 0; i < assets.length; ) {\\n            _releaseFund(comptroller, assets[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to find out the amount of funds that's going to be released when release funds is called.\\n     * @param comptroller the comptroller address of the pool\\n     * @param schema the schema of the distribution target\\n     * @param destination the destination address of the distribution target\\n     * @param asset the asset address which will be released\\n     */\\n    function getUnreleasedFunds(\\n        address comptroller,\\n        Schema schema,\\n        address destination,\\n        address asset\\n    ) external view returns (uint256) {\\n        for (uint256 i = 0; i < distributionTargets.length; ) {\\n            DistributionConfig storage _config = distributionTargets[i];\\n            if (_config.schema == schema && _config.destination == destination) {\\n                uint256 total = assetsReserves[comptroller][asset][schema];\\n                return (total * _config.percentage) / MAX_PERCENT;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of distribution targets\\n     */\\n    function totalDistributions() external view returns (uint256) {\\n        return distributionTargets.length;\\n    }\\n\\n    /**\\n     * @dev Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.\\n     * @param comptroller  Comptroller address(pool)\\n     * @param asset Asset address.\\n     * @param incomeType type of income\\n     */\\n    function updateAssetsState(\\n        address comptroller,\\n        address asset,\\n        IncomeType incomeType\\n    ) public override(IProtocolShareReserve) nonReentrant {\\n        if (!ComptrollerInterface(comptroller).isComptroller()) revert InvalidAddress();\\n        if (asset == address(0)) revert InvalidAddress();\\n        if (\\n            comptroller != CORE_POOL_COMPTROLLER &&\\n            PoolRegistryInterface(poolRegistry).getVTokenForAsset(comptroller, asset) == address(0)\\n        ) revert InvalidAddress();\\n\\n        Schema schema = getSchema(comptroller, asset, incomeType);\\n        uint256 currentBalance = IERC20Upgradeable(asset).balanceOf(address(this));\\n        uint256 assetReserve = totalAssetReserve[asset];\\n\\n        if (currentBalance > assetReserve) {\\n            uint256 balanceDifference;\\n            unchecked {\\n                balanceDifference = currentBalance - assetReserve;\\n            }\\n\\n            assetsReserves[comptroller][asset][schema] += balanceDifference;\\n            totalAssetReserve[asset] += balanceDifference;\\n            emit AssetsReservesUpdated(comptroller, asset, balanceDifference, incomeType, schema);\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the list of prime markets and then accrues interest and\\n     * releases the funds to prime for each market\\n     */\\n    function _accrueAndReleaseFundsToPrime() internal {\\n        address[] memory markets = IPrime(prime).getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; ) {\\n            address market = markets[i];\\n            IPrime(prime).accrueInterest(market);\\n            _releaseFund(CORE_POOL_COMPTROLLER, _getUnderlying(market));\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the list of prime markets and then accrues interest\\n     * to prime for each market\\n     */\\n    function _accruePrimeInterest() internal {\\n        address[] memory markets = IPrime(prime).getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; ) {\\n            address market = markets[i];\\n            IPrime(prime).accrueInterest(market);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev asset from a particular pool to be release to distribution targets\\n     * @param comptroller  Comptroller address(pool)\\n     * @param asset Asset address.\\n     */\\n    function _releaseFund(address comptroller, address asset) internal {\\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\\n        uint256[] memory schemaBalances = new uint256[](totalSchemas);\\n        uint256 totalBalance;\\n        for (uint256 schemaValue; schemaValue < totalSchemas; ) {\\n            schemaBalances[schemaValue] = assetsReserves[comptroller][asset][Schema(schemaValue)];\\n            totalBalance += schemaBalances[schemaValue];\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n\\n        if (totalBalance == 0) {\\n            return;\\n        }\\n\\n        uint256[] memory totalTransferAmounts = new uint256[](totalSchemas);\\n        for (uint256 i = 0; i < distributionTargets.length; ) {\\n            DistributionConfig memory _config = distributionTargets[i];\\n\\n            uint256 transferAmount = (schemaBalances[uint256(_config.schema)] * _config.percentage) / MAX_PERCENT;\\n            totalTransferAmounts[uint256(_config.schema)] += transferAmount;\\n\\n            IERC20Upgradeable(asset).safeTransfer(_config.destination, transferAmount);\\n            IIncomeDestination(_config.destination).updateAssetsState(comptroller, asset);\\n\\n            emit AssetReleased(_config.destination, asset, _config.schema, _config.percentage, transferAmount);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory newSchemaBalances = new uint256[](totalSchemas);\\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\\n            newSchemaBalances[schemaValue] = schemaBalances[schemaValue] - totalTransferAmounts[schemaValue];\\n            assetsReserves[comptroller][asset][Schema(schemaValue)] = newSchemaBalances[schemaValue];\\n            totalAssetReserve[asset] = totalAssetReserve[asset] - totalTransferAmounts[schemaValue];\\n\\n            emit ReservesUpdated(\\n                comptroller,\\n                asset,\\n                Schema(schemaValue),\\n                schemaBalances[schemaValue],\\n                newSchemaBalances[schemaValue]\\n            );\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the schema based on comptroller, asset and income type\\n     * @param comptroller  Comptroller address(pool)\\n     * @param asset Asset address.\\n     * @param incomeType type of income\\n     * @return schema schema for distribution\\n     */\\n    function getSchema(\\n        address comptroller,\\n        address asset,\\n        IncomeType incomeType\\n    ) internal view returns (Schema schema) {\\n        schema = Schema.DEFAULT;\\n        address vToken = IPrime(prime).vTokenForAsset(asset);\\n\\n        if (vToken != address(0) && comptroller == CORE_POOL_COMPTROLLER && incomeType == IncomeType.SPREAD) {\\n            schema = Schema.SPREAD_PRIME_CORE;\\n        }\\n    }\\n\\n    function _ensurePercentages() internal view {\\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\\n        uint256[] memory totalPercentages = new uint256[](totalSchemas);\\n\\n        for (uint256 i = 0; i < distributionTargets.length; ) {\\n            DistributionConfig memory config = distributionTargets[i];\\n            totalPercentages[uint256(config.schema)] += config.percentage;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\\n            if (totalPercentages[schemaValue] != MAX_PERCENT && totalPercentages[schemaValue] != 0)\\n                revert InvalidTotalPercentage();\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the underlying asset address for the vToken\\n     * @param vToken vToken address\\n     * @return asset address of asset\\n     */\\n    function _getUnderlying(address vToken) internal view returns (address) {\\n        if (vToken == vBNB) {\\n            return WBNB;\\n        } else {\\n            return IVToken(vToken).underlying();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61e7c1edf281f2806b349f712da6296c5f2e2dd102711b594015ab7c887e3dc3\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620030c9380380620030c98339810160408190526200003491620001b7565b6001600160a01b0383166200005c5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038216620000845760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b038116620000ac5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0380841660805282811660a052811660c052620000cf620000d8565b50505062000201565b600054610100900460ff1615620001455760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000198576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b0381168114620001b257600080fd5b919050565b600080600060608486031215620001cd57600080fd5b620001d8846200019a565b9250620001e8602085016200019a565b9150620001f8604085016200019a565b90509250925092565b60805160a05160c051612e7562000254600039600081816101e201526121390152600081816102bc01526121730152600081816103a3015281816104cd015281816112e1015261159e0152612e756000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c8063aea21121116100e3578063c9e18c6f1161008c578063f2fde38b11610066578063f2fde38b1461038b578063fa7b81a01461039e578063fc31116a146103c557600080fd5b8063c9e18c6f14610354578063cd6dc68714610367578063e30c39781461037a57600080fd5b8063ba879b5b116100bd578063ba879b5b14610324578063be26317e14610337578063c7ee005e1461034057600080fd5b8063aea21121146102de578063afcff50f146102ff578063b4a0bdf31461031357600080fd5b8063715018a611610145578063893ffe981161011f578063893ffe98146102935780638da5cb5b146102a65780638dd95002146102b757600080fd5b8063715018a61461027057806379ba5097146102785780637b77cd6a1461028057600080fd5b806333e1567f1161017657806333e1567f146101dd578063392ee7121461021c5780635db6da121461023e57600080fd5b80630e32cb861461019d578063163db71b146101b257806316faecec146101ca575b600080fd5b6101b06101ab3660046126a1565b6103d8565b005b610131545b6040519081526020015b60405180910390f35b6101b06101d83660046126d2565b6103ec565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c1565b61022f61022a36600461271d565b61079b565b6040516101c19392919061279c565b6101b761024c3660046126d2565b61012f60209081526000938452604080852082529284528284209052825290205481565b6101b06107dc565b6101b06107f0565b6101b061028e3660046126a1565b610880565b6101b76102a13660046127c6565b61093e565b6033546001600160a01b0316610204565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101b76102ec3660046126a1565b6101306020526000908152604090205481565b61012e54610204906001600160a01b031681565b6097546001600160a01b0316610204565b6101b06103323660046128ed565b610a52565b6101b760fb5481565b61012d54610204906001600160a01b031681565b6101b06103623660046126a1565b610d6d565b6101b06103753660046129c2565b610e2b565b6065546001600160a01b0316610204565b6101b06103993660046126a1565b610fb6565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101b06103d33660046129ee565b61103f565b6103e0611095565b6103e9816110ef565b50565b6103f46111e5565b826001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190612a9d565b61048b576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166104cb576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141580156105a4575061012e546040517f266e0a7f0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152600092169063266e0a7f90604401602060405180830381865afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612abf565b6001600160a01b0316145b156105db576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105e884848461123e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190612adc565b6001600160a01b0385166000908152610130602052604090205490915080821115610789576001600160a01b03808716600090815261012f602090815260408083209389168352929052908120828403918291908660018111156106d5576106d5612736565b60018111156106e6576106e6612736565b815260200190815260200160002060008282546107039190612b24565b90915550506001600160a01b0386166000908152610130602052604081208054839290610731908490612b24565b92505081905550856001600160a01b0316876001600160a01b03167fa46b2431e663cf7b50c9d5129aff85d2394ecfd447b7ccba83986510a9d945ea83888860405161077f93929190612b3c565b60405180910390a3505b505050610796600160c955565b505050565b61013181815481106107ac57600080fd5b600091825260209091206003909102018054600182015460029092015460ff90911692506001600160a01b031683565b6107e4611095565b6107ee600061134b565b565b60655433906001600160a01b031681146108775760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103e98161134b565b610888611095565b6001600160a01b0381166108c8576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012e546040516001600160a01b038084169216907fa87b964d321035d2165e484ff4b722dd6eae30606c0b98887d2ed1a34e594bfe90600090a361012e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000805b61013154811015610a48576000610131828154811061096357610963612b69565b9060005260206000209060030201905085600181111561098557610985612736565b815460ff16600181111561099b5761099b612736565b1480156109b7575060028101546001600160a01b038681169116145b15610a3f576001600160a01b03808816600090815261012f602090815260408083209388168352929052908120818860018111156109f7576109f7612736565b6001811115610a0857610a08612736565b81526020019081526020016000205490506064826001015482610a2b9190612b98565b610a359190612bd5565b9350505050610a4a565b50600101610942565b505b949350505050565b610a5a6111e5565b610a7b604051806060016040528060348152602001612e0c6034913961137c565b610a83611448565b60005b8151811015610d4d576000828281518110610aa357610aa3612b69565b6020026020010151905060006001600160a01b031681604001516001600160a01b031603610b395760405162461bcd60e51b815260206004820152603160248201527f50726f746f636f6c5368617265526573657276653a2044657374696e6174696f60448201527f6e206164647265737320696e76616c6964000000000000000000000000000000606482015260840161086e565b6000805b61013154811015610c305760006101318281548110610b5e57610b5e612b69565b60009182526020909120600390910201805490915060ff166001811115610b8757610b87612736565b84516001811115610b9a57610b9a612736565b148015610bbb5750604084015160028201546001600160a01b039081169116145b15610c275783604001516001600160a01b03167f86425c9fc7b14328a4d53181ae1cafa5c44688f63636e30200b7384984ac17b8826001015486602001518760000151604051610c0d93929190612c10565b60405180910390a260208401516001918201559150610c30565b50600101610b3d565b5080610d4357610131805460018181018355600092909252835160039091027fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db73018054859391929183917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115610cae57610cae612736565b02179055506020828101516001830155604092830151600290920180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0393841617905584830151908501518551935191909216927fbfee2691582b93dec113181471d377f858f39c4ba82e135be3d4d7240b11ed3c92610d3a92909190612c27565b60405180910390a25b5050600101610a86565b50610d566115d4565b61013154610d6390611795565b6103e9600160c955565b610d75611095565b6001600160a01b038116610db5576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012d546040516001600160a01b038084169216907f229f487e93a5313f6898190adf00c62e8b5d4c9c46249d31a9cd8a8024007bce90600090a361012d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610e4b5750600054600160ff909116105b80610e655750303b158015610e65575060005460ff166001145b610ed75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161086e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f3557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610f3e836117df565b610f4661186d565b610f4f826118f2565b801561079657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610fbe611095565b606580546001600160a01b0383167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091556110076033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6110476111e5565b61104f6119a7565b60005b81518110156110865761107e8383838151811061107157611071612b69565b6020026020010151611b04565b600101611052565b50611091600160c955565b5050565b6033546001600160a01b031633146107ee5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086e565b6001600160a01b03811661116b5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e6167657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161086e565b609780546001600160a01b038381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b600260c954036112375760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161086e565b600260c955565b61012d546040517fee6b13fc0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600092839291169063ee6b13fc90602401602060405180830381865afa1580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190612abf565b90506001600160a01b0381161580159061131557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b80156113325750600083600181111561133057611330612736565b145b1561133c57600191505b509392505050565b600160c955565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103e9816120cb565b6097546040517f18c5e8ab0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318c5e8ab906113c89033908690600401612cbe565b602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190612a9d565b905080611091573330836040517f4a3fa29300000000000000000000000000000000000000000000000000000000815260040161086e93929190612ce0565b61012d54604080517fb0772d0b00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b0772d0b91600480830192869291908290030181865afa1580156114ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114f19190810190612d15565b905060005b815181101561109157600082828151811061151357611513612b69565b602090810291909101015161012d546040517f9198e5150000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152929350911690639198e51590602401600060405180830381600087803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b505050506115cb7f00000000000000000000000000000000000000000000000000000000000000006115c683612135565b611b04565b506001016114f6565b60006115e1600180612b24565b905060008167ffffffffffffffff8111156115fe576115fe612822565b604051908082528060200260200182016040528015611627578160200160208202803683370190505b50905060005b61013154811015611706576000610131828154811061164e5761164e612b69565b6000918252602090912060408051606081019091526003909202018054829060ff16600181111561168157611681612736565b600181111561169257611692612736565b81526001828101546020808401919091526002909301546001600160a01b03166040909201919091529082015182519293509185918111156116d6576116d6612736565b815181106116e6576116e6612b69565b602002602001018181516116fa9190612b24565b9052505060010161162d565b5060005b8281101561079657606482828151811061172657611726612b69565b602002602001015114158015611756575081818151811061174957611749612b69565b6020026020010151600014155b1561178d576040517f0b8ad7f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60010161170a565b60fb548111156103e95760fb546040517ff257f63600000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161086e565b600054610100900460ff1661185c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6118646121ff565b6103e981612284565b600054610100900460ff166118ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee612301565b60fb5481116119695760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d60448201527f6974000000000000000000000000000000000000000000000000000000000000606482015260840161086e565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa91016111d9565b61012d54604080517fb0772d0b00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b0772d0b91600480830192869291908290030181865afa158015611a0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a509190810190612d15565b905060005b8151811015611091576000828281518110611a7257611a72612b69565b602090810291909101015161012d546040517f9198e5150000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152929350911690639198e51590602401600060405180830381600087803b158015611ae057600080fd5b505af1158015611af4573d6000803e3d6000fd5b5050505081600101915050611a55565b6000611b11600180612b24565b905060008167ffffffffffffffff811115611b2e57611b2e612822565b604051908082528060200260200182016040528015611b57578160200160208202803683370190505b5090506000805b83811015611c1f576001600160a01b03808716600090815261012f60209081526040808320938916835292905290812090826001811115611ba157611ba1612736565b6001811115611bb257611bb2612736565b6001811115611bc357611bc3612736565b815260200190815260200160002054838281518110611be457611be4612b69565b602002602001018181525050828181518110611c0257611c02612b69565b602002602001015182611c159190612b24565b9150600101611b5e565b5080600003611c2f575050505050565b60008367ffffffffffffffff811115611c4a57611c4a612822565b604051908082528060200260200182016040528015611c73578160200160208202803683370190505b50905060005b61013154811015611e965760006101318281548110611c9a57611c9a612b69565b6000918252602090912060408051606081019091526003909202018054829060ff166001811115611ccd57611ccd612736565b6001811115611cde57611cde612736565b81526001828101546020808401919091526002909301546001600160a01b0316604090920191909152908201518251929350600092606492899190811115611d2857611d28612736565b81518110611d3857611d38612b69565b6020026020010151611d4a9190612b98565b611d549190612bd5565b9050808483600001516001811115611d6e57611d6e612736565b81518110611d7e57611d7e612b69565b60200260200101818151611d929190612b24565b9052506040820151611daf906001600160a01b038a16908361237e565b60408083015190517faac59a750000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a811660248301529091169063aac59a7590604401600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b50505050876001600160a01b031682604001516001600160a01b03167f09f71e7b22d78540ee9a42f09917a9d62f46735cb0dfa70d6bab27866d9cb5008460000151856020015185604051611e8493929190612da4565b60405180910390a35050600101611c79565b5060008467ffffffffffffffff811115611eb257611eb2612822565b604051908082528060200260200182016040528015611edb578160200160208202803683370190505b50905060005b858110156120c157828181518110611efb57611efb612b69565b6020026020010151858281518110611f1557611f15612b69565b6020026020010151611f279190612dc5565b828281518110611f3957611f39612b69565b602002602001018181525050818181518110611f5757611f57612b69565b6020908102919091018101516001600160a01b03808b16600090815261012f84526040808220928c1682529190935282209091836001811115611f9c57611f9c612736565b6001811115611fad57611fad612736565b6001811115611fbe57611fbe612736565b815260200190815260200160002081905550828181518110611fe257611fe2612b69565b60200260200101516101306000896001600160a01b03166001600160a01b031681526020019081526020016000205461201b9190612dc5565b6001600160a01b038089166000818152610130602052604090209290925589167f7d881f3d6246a6a2b97b121b8ba093c17497912c68e8b2bca6108528e91df3ca83600181111561206e5761206e612736565b88858151811061208057612080612b69565b602002602001015186868151811061209a5761209a612b69565b60200260200101516040516120b193929190612da4565b60405180910390a3600101611ee1565b5050505050505050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361219757507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f99190612abf565b92915050565b600054610100900460ff1661227c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee6123fe565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b600054610100900460ff166113445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610796908490612484565b600054610100900460ff1661247b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee3361134b565b60006124d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125699092919063ffffffff16565b80519091501561079657808060200190518101906124f79190612a9d565b6107965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161086e565b6060610a4a848460008585600080866001600160a01b031685876040516125909190612ddc565b60006040518083038185875af1925050503d80600081146125cd576040519150601f19603f3d011682016040523d82523d6000602084013e6125d2565b606091505b50915091506125e3878383876125ee565b979650505050505050565b6060831561265d578251600003612656576001600160a01b0385163b6126565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161086e565b5081610a4a565b610a4a83838151156126725781518083602001fd5b8060405162461bcd60e51b815260040161086e9190612df8565b6001600160a01b03811681146103e957600080fd5b6000602082840312156126b357600080fd5b81356126be8161268c565b9392505050565b600281106103e957600080fd5b6000806000606084860312156126e757600080fd5b83356126f28161268c565b925060208401356127028161268c565b91506040840135612712816126c5565b809150509250925092565b60006020828403121561272f57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106103e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b606081016127a985612765565b93815260208101929092526001600160a01b031660409091015290565b600080600080608085870312156127dc57600080fd5b84356127e78161268c565b935060208501356127f7816126c5565b925060408501356128078161268c565b915060608501356128178161268c565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561287457612874612822565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128c1576128c1612822565b604052919050565b600067ffffffffffffffff8211156128e3576128e3612822565b5060051b60200190565b6000602080838503121561290057600080fd5b823567ffffffffffffffff81111561291757600080fd5b8301601f8101851361292857600080fd5b803561293b612936826128c9565b61287a565b8181526060918202830184019184820191908884111561295a57600080fd5b938501935b838510156129b65780858a0312156129775760008081fd5b61297f612851565b853561298a816126c5565b815285870135878201526040808701356129a38161268c565b908201528352938401939185019161295f565b50979650505050505050565b600080604083850312156129d557600080fd5b82356129e08161268c565b946020939093013593505050565b60008060408385031215612a0157600080fd5b8235612a0c8161268c565b915060208381013567ffffffffffffffff811115612a2957600080fd5b8401601f81018613612a3a57600080fd5b8035612a48612936826128c9565b81815260059190911b82018301908381019088831115612a6757600080fd5b928401925b82841015612a8e578335612a7f8161268c565b82529284019290840190612a6c565b80955050505050509250929050565b600060208284031215612aaf57600080fd5b815180151581146126be57600080fd5b600060208284031215612ad157600080fd5b81516126be8161268c565b600060208284031215612aee57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b3757612b37612af5565b500190565b83815260608101612b4c84612765565b836020830152612b5b83612765565b826040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bd057612bd0612af5565b500290565b600082612c0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8381526020810183905260608101612b5b83612765565b82815260408101612c3783612765565b8260208301529392505050565b60005b83811015612c5f578181015183820152602001612c47565b83811115612c6e576000848401525b50505050565b60008151808452612c8c816020860160208601612c44565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6001600160a01b0383168152604060208201526000610a4a6040830184612c74565b60006001600160a01b03808616835280851660208401525060606040830152612d0c6060830184612c74565b95945050505050565b60006020808385031215612d2857600080fd5b825167ffffffffffffffff811115612d3f57600080fd5b8301601f81018513612d5057600080fd5b8051612d5e612936826128c9565b81815260059190911b82018301908381019087831115612d7d57600080fd5b928401925b828410156125e3578351612d958161268c565b82529284019290840190612d82565b60608101612db185612765565b938152602081019290925260409091015290565b600082821015612dd757612dd7612af5565b500390565b60008251612dee818460208701612c44565b9190910192915050565b6020815260006126be6020830184612c7456fe6164644f72557064617465446973747269627574696f6e436f6e6669677328446973747269627574696f6e436f6e6669675b5d29a2646970667358221220200f934f21b50bc29974b57d9d4cec51caf0ed0f1239fda734b58ac3d7ddfb7964736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c8063aea21121116100e3578063c9e18c6f1161008c578063f2fde38b11610066578063f2fde38b1461038b578063fa7b81a01461039e578063fc31116a146103c557600080fd5b8063c9e18c6f14610354578063cd6dc68714610367578063e30c39781461037a57600080fd5b8063ba879b5b116100bd578063ba879b5b14610324578063be26317e14610337578063c7ee005e1461034057600080fd5b8063aea21121146102de578063afcff50f146102ff578063b4a0bdf31461031357600080fd5b8063715018a611610145578063893ffe981161011f578063893ffe98146102935780638da5cb5b146102a65780638dd95002146102b757600080fd5b8063715018a61461027057806379ba5097146102785780637b77cd6a1461028057600080fd5b806333e1567f1161017657806333e1567f146101dd578063392ee7121461021c5780635db6da121461023e57600080fd5b80630e32cb861461019d578063163db71b146101b257806316faecec146101ca575b600080fd5b6101b06101ab3660046126a1565b6103d8565b005b610131545b6040519081526020015b60405180910390f35b6101b06101d83660046126d2565b6103ec565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101c1565b61022f61022a36600461271d565b61079b565b6040516101c19392919061279c565b6101b761024c3660046126d2565b61012f60209081526000938452604080852082529284528284209052825290205481565b6101b06107dc565b6101b06107f0565b6101b061028e3660046126a1565b610880565b6101b76102a13660046127c6565b61093e565b6033546001600160a01b0316610204565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101b76102ec3660046126a1565b6101306020526000908152604090205481565b61012e54610204906001600160a01b031681565b6097546001600160a01b0316610204565b6101b06103323660046128ed565b610a52565b6101b760fb5481565b61012d54610204906001600160a01b031681565b6101b06103623660046126a1565b610d6d565b6101b06103753660046129c2565b610e2b565b6065546001600160a01b0316610204565b6101b06103993660046126a1565b610fb6565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101b06103d33660046129ee565b61103f565b6103e0611095565b6103e9816110ef565b50565b6103f46111e5565b826001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104559190612a9d565b61048b576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166104cb576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316141580156105a4575061012e546040517f266e0a7f0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528481166024830152600092169063266e0a7f90604401602060405180830381865afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612abf565b6001600160a01b0316145b156105db576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006105e884848461123e565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190612adc565b6001600160a01b0385166000908152610130602052604090205490915080821115610789576001600160a01b03808716600090815261012f602090815260408083209389168352929052908120828403918291908660018111156106d5576106d5612736565b60018111156106e6576106e6612736565b815260200190815260200160002060008282546107039190612b24565b90915550506001600160a01b0386166000908152610130602052604081208054839290610731908490612b24565b92505081905550856001600160a01b0316876001600160a01b03167fa46b2431e663cf7b50c9d5129aff85d2394ecfd447b7ccba83986510a9d945ea83888860405161077f93929190612b3c565b60405180910390a3505b505050610796600160c955565b505050565b61013181815481106107ac57600080fd5b600091825260209091206003909102018054600182015460029092015460ff90911692506001600160a01b031683565b6107e4611095565b6107ee600061134b565b565b60655433906001600160a01b031681146108775760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103e98161134b565b610888611095565b6001600160a01b0381166108c8576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012e546040516001600160a01b038084169216907fa87b964d321035d2165e484ff4b722dd6eae30606c0b98887d2ed1a34e594bfe90600090a361012e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000805b61013154811015610a48576000610131828154811061096357610963612b69565b9060005260206000209060030201905085600181111561098557610985612736565b815460ff16600181111561099b5761099b612736565b1480156109b7575060028101546001600160a01b038681169116145b15610a3f576001600160a01b03808816600090815261012f602090815260408083209388168352929052908120818860018111156109f7576109f7612736565b6001811115610a0857610a08612736565b81526020019081526020016000205490506064826001015482610a2b9190612b98565b610a359190612bd5565b9350505050610a4a565b50600101610942565b505b949350505050565b610a5a6111e5565b610a7b604051806060016040528060348152602001612e0c6034913961137c565b610a83611448565b60005b8151811015610d4d576000828281518110610aa357610aa3612b69565b6020026020010151905060006001600160a01b031681604001516001600160a01b031603610b395760405162461bcd60e51b815260206004820152603160248201527f50726f746f636f6c5368617265526573657276653a2044657374696e6174696f60448201527f6e206164647265737320696e76616c6964000000000000000000000000000000606482015260840161086e565b6000805b61013154811015610c305760006101318281548110610b5e57610b5e612b69565b60009182526020909120600390910201805490915060ff166001811115610b8757610b87612736565b84516001811115610b9a57610b9a612736565b148015610bbb5750604084015160028201546001600160a01b039081169116145b15610c275783604001516001600160a01b03167f86425c9fc7b14328a4d53181ae1cafa5c44688f63636e30200b7384984ac17b8826001015486602001518760000151604051610c0d93929190612c10565b60405180910390a260208401516001918201559150610c30565b50600101610b3d565b5080610d4357610131805460018181018355600092909252835160039091027fbd987ad6ccdb7c7567f7335ea839f95dc944431abcf935b6924f70215963db73018054859391929183917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016908381811115610cae57610cae612736565b02179055506020828101516001830155604092830151600290920180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0393841617905584830151908501518551935191909216927fbfee2691582b93dec113181471d377f858f39c4ba82e135be3d4d7240b11ed3c92610d3a92909190612c27565b60405180910390a25b5050600101610a86565b50610d566115d4565b61013154610d6390611795565b6103e9600160c955565b610d75611095565b6001600160a01b038116610db5576040517fe6c4247b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012d546040516001600160a01b038084169216907f229f487e93a5313f6898190adf00c62e8b5d4c9c46249d31a9cd8a8024007bce90600090a361012d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff1615808015610e4b5750600054600160ff909116105b80610e655750303b158015610e65575060005460ff166001145b610ed75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161086e565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610f3557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610f3e836117df565b610f4661186d565b610f4f826118f2565b801561079657600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b610fbe611095565b606580546001600160a01b0383167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091556110076033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6110476111e5565b61104f6119a7565b60005b81518110156110865761107e8383838151811061107157611071612b69565b6020026020010151611b04565b600101611052565b50611091600160c955565b5050565b6033546001600160a01b031633146107ee5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161086e565b6001600160a01b03811661116b5760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e6167657220616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161086e565b609780546001600160a01b038381167fffffffffffffffffffffffff000000000000000000000000000000000000000083168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b600260c954036112375760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161086e565b600260c955565b61012d546040517fee6b13fc0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152600092839291169063ee6b13fc90602401602060405180830381865afa1580156112a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ca9190612abf565b90506001600160a01b0381161580159061131557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b0316145b80156113325750600083600181111561133057611330612736565b145b1561133c57600191505b509392505050565b600160c955565b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001690556103e9816120cb565b6097546040517f18c5e8ab0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906318c5e8ab906113c89033908690600401612cbe565b602060405180830381865afa1580156113e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114099190612a9d565b905080611091573330836040517f4a3fa29300000000000000000000000000000000000000000000000000000000815260040161086e93929190612ce0565b61012d54604080517fb0772d0b00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b0772d0b91600480830192869291908290030181865afa1580156114ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114f19190810190612d15565b905060005b815181101561109157600082828151811061151357611513612b69565b602090810291909101015161012d546040517f9198e5150000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152929350911690639198e51590602401600060405180830381600087803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b505050506115cb7f00000000000000000000000000000000000000000000000000000000000000006115c683612135565b611b04565b506001016114f6565b60006115e1600180612b24565b905060008167ffffffffffffffff8111156115fe576115fe612822565b604051908082528060200260200182016040528015611627578160200160208202803683370190505b50905060005b61013154811015611706576000610131828154811061164e5761164e612b69565b6000918252602090912060408051606081019091526003909202018054829060ff16600181111561168157611681612736565b600181111561169257611692612736565b81526001828101546020808401919091526002909301546001600160a01b03166040909201919091529082015182519293509185918111156116d6576116d6612736565b815181106116e6576116e6612b69565b602002602001018181516116fa9190612b24565b9052505060010161162d565b5060005b8281101561079657606482828151811061172657611726612b69565b602002602001015114158015611756575081818151811061174957611749612b69565b6020026020010151600014155b1561178d576040517f0b8ad7f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60010161170a565b60fb548111156103e95760fb546040517ff257f63600000000000000000000000000000000000000000000000000000000815260048101919091526024810182905260440161086e565b600054610100900460ff1661185c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6118646121ff565b6103e981612284565b600054610100900460ff166118ea5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee612301565b60fb5481116119695760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d60448201527f6974000000000000000000000000000000000000000000000000000000000000606482015260840161086e565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa91016111d9565b61012d54604080517fb0772d0b00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b0772d0b91600480830192869291908290030181865afa158015611a0a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a509190810190612d15565b905060005b8151811015611091576000828281518110611a7257611a72612b69565b602090810291909101015161012d546040517f9198e5150000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152929350911690639198e51590602401600060405180830381600087803b158015611ae057600080fd5b505af1158015611af4573d6000803e3d6000fd5b5050505081600101915050611a55565b6000611b11600180612b24565b905060008167ffffffffffffffff811115611b2e57611b2e612822565b604051908082528060200260200182016040528015611b57578160200160208202803683370190505b5090506000805b83811015611c1f576001600160a01b03808716600090815261012f60209081526040808320938916835292905290812090826001811115611ba157611ba1612736565b6001811115611bb257611bb2612736565b6001811115611bc357611bc3612736565b815260200190815260200160002054838281518110611be457611be4612b69565b602002602001018181525050828181518110611c0257611c02612b69565b602002602001015182611c159190612b24565b9150600101611b5e565b5080600003611c2f575050505050565b60008367ffffffffffffffff811115611c4a57611c4a612822565b604051908082528060200260200182016040528015611c73578160200160208202803683370190505b50905060005b61013154811015611e965760006101318281548110611c9a57611c9a612b69565b6000918252602090912060408051606081019091526003909202018054829060ff166001811115611ccd57611ccd612736565b6001811115611cde57611cde612736565b81526001828101546020808401919091526002909301546001600160a01b0316604090920191909152908201518251929350600092606492899190811115611d2857611d28612736565b81518110611d3857611d38612b69565b6020026020010151611d4a9190612b98565b611d549190612bd5565b9050808483600001516001811115611d6e57611d6e612736565b81518110611d7e57611d7e612b69565b60200260200101818151611d929190612b24565b9052506040820151611daf906001600160a01b038a16908361237e565b60408083015190517faac59a750000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a811660248301529091169063aac59a7590604401600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b50505050876001600160a01b031682604001516001600160a01b03167f09f71e7b22d78540ee9a42f09917a9d62f46735cb0dfa70d6bab27866d9cb5008460000151856020015185604051611e8493929190612da4565b60405180910390a35050600101611c79565b5060008467ffffffffffffffff811115611eb257611eb2612822565b604051908082528060200260200182016040528015611edb578160200160208202803683370190505b50905060005b858110156120c157828181518110611efb57611efb612b69565b6020026020010151858281518110611f1557611f15612b69565b6020026020010151611f279190612dc5565b828281518110611f3957611f39612b69565b602002602001018181525050818181518110611f5757611f57612b69565b6020908102919091018101516001600160a01b03808b16600090815261012f84526040808220928c1682529190935282209091836001811115611f9c57611f9c612736565b6001811115611fad57611fad612736565b6001811115611fbe57611fbe612736565b815260200190815260200160002081905550828181518110611fe257611fe2612b69565b60200260200101516101306000896001600160a01b03166001600160a01b031681526020019081526020016000205461201b9190612dc5565b6001600160a01b038089166000818152610130602052604090209290925589167f7d881f3d6246a6a2b97b121b8ba093c17497912c68e8b2bca6108528e91df3ca83600181111561206e5761206e612736565b88858151811061208057612080612b69565b602002602001015186868151811061209a5761209a612b69565b60200260200101516040516120b193929190612da4565b60405180910390a3600101611ee1565b5050505050505050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03160361219757507f0000000000000000000000000000000000000000000000000000000000000000919050565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f99190612abf565b92915050565b600054610100900460ff1661227c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee6123fe565b600054610100900460ff166103e05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b600054610100900460ff166113445760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610796908490612484565b600054610100900460ff1661247b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161086e565b6107ee3361134b565b60006124d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125699092919063ffffffff16565b80519091501561079657808060200190518101906124f79190612a9d565b6107965760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161086e565b6060610a4a848460008585600080866001600160a01b031685876040516125909190612ddc565b60006040518083038185875af1925050503d80600081146125cd576040519150601f19603f3d011682016040523d82523d6000602084013e6125d2565b606091505b50915091506125e3878383876125ee565b979650505050505050565b6060831561265d578251600003612656576001600160a01b0385163b6126565760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161086e565b5081610a4a565b610a4a83838151156126725781518083602001fd5b8060405162461bcd60e51b815260040161086e9190612df8565b6001600160a01b03811681146103e957600080fd5b6000602082840312156126b357600080fd5b81356126be8161268c565b9392505050565b600281106103e957600080fd5b6000806000606084860312156126e757600080fd5b83356126f28161268c565b925060208401356127028161268c565b91506040840135612712816126c5565b809150509250925092565b60006020828403121561272f57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106103e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b606081016127a985612765565b93815260208101929092526001600160a01b031660409091015290565b600080600080608085870312156127dc57600080fd5b84356127e78161268c565b935060208501356127f7816126c5565b925060408501356128078161268c565b915060608501356128178161268c565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561287457612874612822565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156128c1576128c1612822565b604052919050565b600067ffffffffffffffff8211156128e3576128e3612822565b5060051b60200190565b6000602080838503121561290057600080fd5b823567ffffffffffffffff81111561291757600080fd5b8301601f8101851361292857600080fd5b803561293b612936826128c9565b61287a565b8181526060918202830184019184820191908884111561295a57600080fd5b938501935b838510156129b65780858a0312156129775760008081fd5b61297f612851565b853561298a816126c5565b815285870135878201526040808701356129a38161268c565b908201528352938401939185019161295f565b50979650505050505050565b600080604083850312156129d557600080fd5b82356129e08161268c565b946020939093013593505050565b60008060408385031215612a0157600080fd5b8235612a0c8161268c565b915060208381013567ffffffffffffffff811115612a2957600080fd5b8401601f81018613612a3a57600080fd5b8035612a48612936826128c9565b81815260059190911b82018301908381019088831115612a6757600080fd5b928401925b82841015612a8e578335612a7f8161268c565b82529284019290840190612a6c565b80955050505050509250929050565b600060208284031215612aaf57600080fd5b815180151581146126be57600080fd5b600060208284031215612ad157600080fd5b81516126be8161268c565b600060208284031215612aee57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115612b3757612b37612af5565b500190565b83815260608101612b4c84612765565b836020830152612b5b83612765565b826040830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bd057612bd0612af5565b500290565b600082612c0b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8381526020810183905260608101612b5b83612765565b82815260408101612c3783612765565b8260208301529392505050565b60005b83811015612c5f578181015183820152602001612c47565b83811115612c6e576000848401525b50505050565b60008151808452612c8c816020860160208601612c44565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6001600160a01b0383168152604060208201526000610a4a6040830184612c74565b60006001600160a01b03808616835280851660208401525060606040830152612d0c6060830184612c74565b95945050505050565b60006020808385031215612d2857600080fd5b825167ffffffffffffffff811115612d3f57600080fd5b8301601f81018513612d5057600080fd5b8051612d5e612936826128c9565b81815260059190911b82018301908381019087831115612d7d57600080fd5b928401925b828410156125e3578351612d958161268c565b82529284019290840190612d82565b60608101612db185612765565b938152602081019290925260409091015290565b600082821015612dd757612dd7612af5565b500390565b60008251612dee818460208701612c44565b9190910192915050565b6020815260006126be6020830184612c7456fe6164644f72557064617465446973747269627574696f6e436f6e6669677328446973747269627574696f6e436f6e6669675b5d29a2646970667358221220200f934f21b50bc29974b57d9d4cec51caf0ed0f1239fda734b58ac3d7ddfb7964736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addOrUpdateDistributionConfigs((uint8,uint256,address)[])": {
        "details": "Add or update destination targets based on destination address",
        "params": {
          "configs": "configurations of the destinations."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getUnreleasedFunds(address,uint8,address,address)": {
        "details": "Used to find out the amount of funds that's going to be released when release funds is called.",
        "params": {
          "asset": "the asset address which will be released",
          "comptroller": "the comptroller address of the pool",
          "destination": "the destination address of the distribution target",
          "schema": "the schema of the distribution target"
        }
      },
      "initialize(address,uint256)": {
        "details": "Initializes the deployer to owner.",
        "params": {
          "_accessControlManager": "The address of ACM contract",
          "_loopsLimit": "Limit for the loops in the contract to avoid DOS"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "releaseFunds(address,address[])": {
        "details": "Release funds",
        "params": {
          "assets": "assets to be released to distribution targets",
          "comptroller": "the comptroller address of the pool"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setPoolRegistry(address)": {
        "details": "Pool registry setter.",
        "params": {
          "_poolRegistry": "Address of the pool registry"
        }
      },
      "setPrime(address)": {
        "details": "Prime contract address setter.",
        "params": {
          "_prime": "Address of the prime contract"
        }
      },
      "totalDistributions()": {
        "details": "Returns the total number of distribution targets"
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateAssetsState(address,address,uint8)": {
        "details": "Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.",
        "params": {
          "asset": "Asset address.",
          "comptroller": "Comptroller address(pool)",
          "incomeType": "type of income"
        }
      }
    },
    "stateVariables": {
      "CORE_POOL_COMPTROLLER": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "WBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "MaxLoopsLimitExceeded(uint256,uint256)": [
        {
          "notice": "Thrown an error on maxLoopsLimit exceeds for any loop"
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ]
    },
    "events": {
      "AssetReleased(address,address,uint8,uint256,uint256)": {
        "notice": "Event emitted when an asset is released to a target"
      },
      "AssetsReservesUpdated(address,address,uint256,uint8,uint8)": {
        "notice": "Event emitted after the updation of the assets reserves."
      },
      "DistributionConfigAdded(address,uint256,uint8)": {
        "notice": "Event emitted when distribution configuration is added"
      },
      "DistributionConfigUpdated(address,uint256,uint256,uint8)": {
        "notice": "Event emitted when distribution configuration is updated"
      },
      "MaxLoopsLimitUpdated(uint256,uint256)": {
        "notice": "Emitted when max loops limit is set"
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "PoolRegistryUpdated(address,address)": {
        "notice": "Emitted when pool registry address is updated"
      },
      "PrimeUpdated(address,address)": {
        "notice": "Emitted when prime address is updated"
      },
      "ReservesUpdated(address,address,uint8,uint256,uint256)": {
        "notice": "Event emitted when asset reserves state is updated"
      }
    },
    "kind": "user",
    "methods": {
      "CORE_POOL_COMPTROLLER()": {
        "notice": "address of core pool comptroller contract"
      },
      "WBNB()": {
        "notice": "address of WBNB contract"
      },
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "assetsReserves(address,address,uint8)": {
        "notice": "comptroller => asset => schema => balance"
      },
      "distributionTargets(uint256)": {
        "notice": "configuration for different income distribution targets"
      },
      "poolRegistry()": {
        "notice": "address of pool registry contract"
      },
      "prime()": {
        "notice": "address of Prime contract"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "totalAssetReserve(address)": {
        "notice": "asset => balance"
      },
      "vBNB()": {
        "notice": "address of vBNB contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1199,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1999,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAccessControlManagerV8)2183"
      },
      {
        "astId": 2004,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 420,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2188,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "maxLoopsLimit",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 2193,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2398,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "prime",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 2401,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 2414,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "assetsReserves",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_enum(Schema)2377,t_uint256)))"
      },
      {
        "astId": 2419,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "totalAssetReserve",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2424,
        "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "distributionTargets",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_struct(DistributionConfig)2386_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DistributionConfig)2386_storage)dyn_storage": {
        "base": "t_struct(DistributionConfig)2386_storage",
        "encoding": "dynamic_array",
        "label": "struct ProtocolShareReserve.DistributionConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)2183": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_enum(Schema)2377": {
        "encoding": "inplace",
        "label": "enum ProtocolShareReserve.Schema",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_enum(Schema)2377,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(enum ProtocolShareReserve.Schema => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_enum(Schema)2377,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_enum(Schema)2377,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum ProtocolShareReserve.Schema => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Schema)2377,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Schema)2377,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Schema)2377",
        "label": "mapping(enum ProtocolShareReserve.Schema => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DistributionConfig)2386_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolShareReserve.DistributionConfig",
        "members": [
          {
            "astId": 2380,
            "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "schema",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Schema)2377"
          },
          {
            "astId": 2383,
            "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2385,
            "contract": "contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "destination",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}